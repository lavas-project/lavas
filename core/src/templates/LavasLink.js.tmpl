'use strict';

// 将super-json转化的正则对象复原
function getRegExp(regExpStr) {
    if (typeof regExpStr === 'string' && regExpStr.indexOf('#!RegExp') === 0) {
        let match = regExpStr.match(/^#!RegExp(\[.*\])$/);
        let tmp = JSON.parse(match[1]);
        return new RegExp(tmp[0], tmp[1]);
    }

    return regExpStr;
}

// 检测URL是否匹配entry
function matchUrl(routes, url) {
    if (Array.isArray(routes)) {
        return routes.some(route => matchUrl(route, url));
    }

    let reg;
    if (typeof routes === 'string') {
        reg = new RegExp('^' + routes.replace(/\/:[^\/]*/g, '/[^\/]+') + '\/?');
    }
    else if (typeof routes === 'object' && typeof routes.test === 'function') {
        reg = routes;
    }

    return reg.test(url);
}

// 获得URL对应的entryConfig
function getEntry(url) {
    return entryConfig.find(config => matchUrl(config.routes, url));
}

let entryConfig = <%= entryConfig %>;
// 将entryConfig中的正则复原
entryConfig.forEach(config => config.routes = getRegExp(config.routes));

export default {
    name: 'lavas-link',
    props: {
        to: {
            type: [String, Object],
            required: true
        },
        tag: {
            type: String,
            default: 'a'
        },
        exact: Boolean,
        append: Boolean,
        replace: Boolean,
        activeClass: String,
        exactActiveClass: String,
        event: {
            type: [String, Array],
            default: 'click'
        }
    },
    render (createElement) {
        let current = this.$route.path;
        let currentEntry = getEntry(this.$route.path);
        let {location: {path: to}} = this.$router.resolve(this.to, current, this.append);
        let toEntry = getEntry(to);
        if (currentEntry && toEntry && currentEntry.name === toEntry.name) {
            return createElement('router-link', {
                attrs: {
                    to: this.to,
                    tag: this.tag,
                    exact: this.exact,
                    append: this.append,
                    replace: this.replace,
                    activeClass: this.activeClass,
                    exactActiveClass: this.exactActiveClass,
                    event: this.event
                }
            }, this.$slots.default);
        }

        if (toEntry && toEntry.mode === 'hash' && to.indexOf('#') === -1) {
            to += '#' + to;
        }

        return createElement('a', {
            attrs: {
                href: to
            }
        }, this.$slots.default);
    }
}
